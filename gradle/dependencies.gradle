apply from: 'gradle/property_helper.gradle'

repositories {

    // This maven repository hosts files for hundreds of mods. Some notable 
    // mods include Bookshelf, Botania, BotanyPots, CraftTweaker, DarkUtils,
    // GameStages, Patchouli, Psi, and Quark.    
    maven {

        url 'https://maven.blamejared.com'
    }
    
    // This maven repository hosts files for dozens of mods. Some notable
    // mods include JEI, TinkersConstruct, and ChiselAndBits.
    maven {

        url 'https://dvs1.progwml6.com/files/maven'
    }
    
    // This maven repository hosts files for mods by TheIllusiveC4. This
    // includes Curios, Caelus, and other APIs.
    maven {

        url = 'https://maven.theillusivec4.top/'
    }
    
    // This maven repository proxies requests to the CurseForge API. This will
    // allow mods without traditional mavens to be used in a dev environment.
    // They use the pattern curse.maven:<descriptor>-<projectid>:<fileid> for 
    // maven coordinates.
    maven {
    
        url = 'https://www.cursemaven.com'
        
        // Improve performance by only querying for their specific group.
        content {
        
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    
    // This section includes mods that are commonly compiled against. It is 
    // recommended to add support for these mods if it makes sense for the 
    // content of your mod.
    if (getDefaultBoolean('dependencies_compile_enabled')) {
        
        // Bookshelf is a general purpose library mod. It provides many helpers
        // and frameworks for other mods to work with. There are also in game
        // debug commands under /bookshelf.
        deobfCompile('bookshelf', 'net.darkhax.bookshelf', 'Bookshelf-1.16.5', '10.0.8')
        
        // JEI is an information interface for game data such as recipes. Mods
        // are encouraged to add data about their own content to this mod.
        // The most common information to include is item descriptions and 
        // crafting info for new recipe categories.
        deobfCompile('jei', 'mezz.jei', 'jei-1.16.5', '7.6.4.90')
        
        // Curios adds new inventory slots for items like rings and charms.
        // Mods are encouraged to use Curios where possible to reduce inventory
        // clutter and provide a unified experience for players.
        deobfCompile('curios', 'top.theillusivec4.curios', 'curios-forge', '1.16.5-4.0.5.1')
        
        // CraftTweaker is a scripting framework for Minecraft. Mods are 
        // encouraged to add support for their new recipe types, events, and 
        // other game mechanics.
        deobfCompile('crafttweaker', 'com.blamejared.crafttweaker', 'CraftTweaker-1.16.5', '7.1.0.291')
        
        // GameStages is a framework for modpack progression frameworks. Mods
        // can use the API to check which flags a player has enabled. This mod
        // has a hard requirement on Bookshelf.        
        deobfCompile('gamestages', 'net.darkhax.gamestages', 'GameStages-1.16.5', '7.1.4')
        
        // Patchouli is a framework for creating in-game documentation through
        // books and other types of documents.
        deobfCompile('patchouli', 'vazkii.patchouli', 'Patchouli', '1.16.4-51')
    }

    // This section includes mods that are commonly used by players and meet a
    // minimum level of quality and performance. These mods are only available
    // at runtime by default meaning you may not directly access their code.
    if (getDefaultBoolean('dependencies_runtime_enabled')) {
    
        // Runelic adds a new font to the game called Runelic. There are also 
        // commands under /runelic which help apply the mod.
        deobfRuntime('runelic', 'net.darkhax.runelic', 'Runelic-1.16.5', '7.0.1')
        
        // Dark Utilities adds a bunch of miscellaneous content to the game 
        // such as Vector Plates which push mobs around. This mod has a hard
        // requirement on Bookshelf and Runelic.
        deobfRuntime('darkutils', 'net.darkhax.darkutilities', 'DarkUtilities-1.16.5', '8.0.10')
        
        // Controlling overhauls the keybind menu by adding a search bar and
        // other QoL features.
        deobfRuntime('controlling', 'com.blamejared.controlling', 'Controlling', '7.0.0.16')
        
        // Tips adds data driven tips to loading screens in the game. New tips
        // can be added by adding entries to your mod's resource pack.
        deobfRuntime('tips', 'net.darkhax.tips', 'Tips-1.16.5', '4.0.8')
        
        // AttributeFix changes the min/max bounds of entity attributes to move
        // them in line with how mods and players expect them to work. For
        // example armor can not go above 30 and damage can not go above 1024
        // in vanilla.
        deobfRuntime('attributefix', 'net.darkhax.attributefix', 'AttributeFix-1.16.5', '10.1.2')
        
        // Adds descriptions of enchantments to enchanted book tooltips.
        deobfRuntime('enchdesc', 'net.darkhax.enchdesc', 'EnchantmentDescriptions-1.16.5', '7.0.8')
        
        // Adds additional tool stats to the item tooltip like harvest level.
        deobfRuntime('toolstats', 'net.darkhax.toolstats', 'ToolStats-1.16.5', '6.0.1')
        
        // Adds a block that can store mass quantities of certain items.
        deobfRuntime('storage-drawers', 'curse.maven', 'storage-drawers-3180569', '3180569')
        
        // Allows data and resource packs to be loaded from an instance wide
        // config folder.
        deobfRuntime('openloader', 'net.darkhax.openloader', 'OpenLoader-1.16.5', '9.0.3')
        
        // Replaces the config GUI with a shiny new one. Mods can enable a 
        // custom menu icon by defining additional properties in the mods.toml
        // file of their mod.
        deobfRuntime('catalogue', 'curse.maven', 'catalogue-459701', '3285353')
        
        deobfRuntime('mod-name-tooltip', 'curse.maven', 'mod-name-tooltip-238747', '3038982')
    }
}

/**
 * Creates a deobfuscated compile dependency. These are available at compile
 * time and runtime. This means you can reference code from this dependency
 * in your mod.
 *
 * See deobfDep for more info.
 */
def deobfCompile(modid, defaultGroup, defaultName, defaultVersion) {

    deobfDep(modid, 'compile', defaultGroup, defaultName, defaultVersion)
}

/**
 * Creates a deobfuscated runtime dependency. These are only available during 
 * runtime and not compile time. This means the dependency will show up when
 * you run the game but you can not directly reference it's code in your mod.
 * 
 * See deobfDep for more info.
 */
def deobfRuntime(modid, defaultGroup, defaultName, defaultVersion) {

    deobfDep(modid, 'runtimeOnly', defaultGroup, defaultName, defaultVersion)
}

/**
 * Creates a new deobfuscated project dependency that is configured using 
 * properties. This allows for greater flexability and additional logging.
 *
 * | Property      | Description                                       | Example               |
 * |---------------|---------------------------------------------------|-----------------------|
 * | modid_enabled | When set to false the dependency will be skipped. | true/false, y/n, 1/0  |
 * | modid_deptype | The type of dependency to create.                 | compile, runtimeOnly  |
 * | modid_group   | The maven group for the dependency.               | net.darkhax.bookshelf |
 * | modid_name    | The name of the dependency.                       | Bookshelf-1.16.5      |
 * | modid_version | The artefact version of the dependency.           | 10.0.7                |
 * 
 * @param modid An ID used in logging and the names of properties.
 * @param defaultType The default type of dependency to create.
 * @param defaultGroup The default group for the maven coordinate. modid_group
 * @param defaultName The default name for the maven coordinate. modid_name
 * @param defaultVersion the default version for the maven coordinate. modid_version
 */
def deobfDep(modid, defaultType, defaultGroup, defaultName, defaultVersion) {

    if (getDefaultBoolean("${modid}_enabled")) {
    
        def depType = getDefaultString("${modid}_deptype", defaultType)
        def group = getDefaultString("${modid}_group", defaultGroup)
        def name = getDefaultString("${modid}_name", defaultName)
        def version = getDefaultString("${modid}_version", defaultVersion)
        
        project.logger.lifecycle("Dependency ${modid} added. ${depType} \'${group}:${name}:${version}\'")
        project.getDependencies().add(depType, fg.deobf("${group}:${name}:${version}"))
    }
    
    else {
    
        project.logger.warn("Dependency ${modid} has been disabled for this build.")
    }
}

ext {

    deobfDep = this.&deobDep
    deobfRuntime = this.&deobRuntime
    deobfCompile = this.&deobCompile
}