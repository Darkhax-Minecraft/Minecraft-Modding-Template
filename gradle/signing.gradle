// This module will load Gradle's built in detached signature plugin. If the 
// required properties are present Gradle will sign all publishing artefacts
// with a detached armored ascii file. These files are primarily used by maven
// to validate the source of an artefact and the integrity of the files.

/*
 This module will load Gradle's built in signing plugin. When the required 
 properties are present the plugin will use PGP to sign all published 
 artefacts and produce detached armoured ASCII signature files (ASC). These 
 files can be used to verify the authenticity and integrity of the published
 artefacts. This is primarily used by tools accessing a Maven.
 
 The required properties are as follows
 
 | Name                      | Type   | Description                                    | Example      |
 |---------------------------|--------|------------------------------------------------|--------------|
 | signing.secretKeyRingFile | File   | A container file for holding PGP keys.         | *.gpg        |
 | signing.keyId             | String | The first 8 characters of the specific key ID. | 39280BAE     |
 | signing.password          | String | The password used when generated the keys.     | 8r+v!$*uaR4K |
 
*/

def canLoad = true

// 
if (!project.hasProperty('signing.secretKeyRingFile') && project.hasProperty('pgpKeyRing')) {

    def pgpKeyRing = project.findProperty('pgpKeyRing')
    
    if (pgpKeyRing instanceof File) {
    
        project.ext.set('signing.secretKeyRingFile', pgpKeyRing.getAbsolutePath())
        project.logger.lifecycle('Setting signing.secretKeyRingFile from pgpKeyRing')
    }
    
    else {
    
        project.logger.warn('Failed to assign signing.secretKeyRingFile from fallback.')
    }
}

if (!project.hasProperty('signing.secretKeyRingFile')) {

    project.logger.warn('Skipping PGP signing. No signing.secretKeyRingFile provided.')
    canLoad = false
}

if (!project.hasProperty('signing.keyId')) {

    project.logger.warn('Skipping PGP signing. No signing.keyId provided.')
    canLoad = false
}

if (!project.hasProperty('signing.password')) {

    project.logger.warn('Skipping PGP signing. No signing.password provided.')
    canLoad = false
}

if (canLoad) {

    apply plugin: 'signing'

    signing {
    
        project.logger.lifecycle('Artefacts will be signed using PGP.')
        sign publishing.publications
    } 
}